using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using NUnit.Framework;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using System;
using System.Threading;
using OpenQA.Selenium.Interactions;

namespace ASC_testing.src.Auth
{
    public class Manage_Users_Tests
    {
        private IWebDriver driver;
        private WebDriverWait wait;

        // **Setup**
       [SetUp]
        public void Setup()
        {
            driver = new ChromeDriver();
            driver.Navigate().GoToUrl("https://anphashop-clone.vercel.app/auth/login");
            driver.Manage().Window.Maximize(); // **M·ªü full m√†n h√¨nh ƒë·ªÉ tr√°nh l·ªói hi·ªÉn th·ªã**
            driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);
            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30)); // **TƒÉng th·ªùi gian ch·ªù**

            // **üî• B∆Ø·ªöC 1: ƒêƒÇNG NH·∫¨P ADMIN üî•**
            IWebElement emailField = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("usernameOrEmail")));
            emailField.SendKeys("phong2305");  

            IWebElement passwordField = driver.FindElement(By.Id("password"));
            passwordField.SendKeys("Chi2305");  

            IWebElement loginButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//button[contains(text(), 'ƒêƒÉng nh·∫≠p')]")));
            loginButton.Click();

            // **üî• B∆Ø·ªöC 2: CH·ªú TRANG CH·ª¶ LOAD HO√ÄN T·∫§T üî•**
            // S·ª≠ d·ª•ng WebDriverWait ƒë·ªÉ ch·ªù ƒë·∫øn khi URL c·ªßa trang ch·ªß xu·∫•t hi·ªán
            wait.Until(ExpectedConditions.UrlContains("home")); // **ƒê·∫£m b·∫£o trang ƒë√£ chuy·ªÉn h∆∞·ªõng**

            // **Ch·ªù trang ·ªïn ƒë·ªãnh sau khi login**
            IWebElement avatar = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//img[@alt='avatar']")));  // Ch·ªù cho avatar xu·∫•t hi·ªán

            // **Cu·ªôn l√™n tr√™n n·∫øu c·∫ßn (tr√°nh l·ªói kh√¥ng b·∫•m ƒë∆∞·ª£c)**
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("window.scrollTo(0, 0);");
            Thread.Sleep(1000); // ƒê·ªÉ ch·∫Øc ch·∫Øn

            // **üî• B∆Ø·ªöC 3: T√åM AVATAR & NH·∫§N V√ÄO üî•**
            // ƒê·∫£m b·∫£o ph·∫ßn t·ª≠ avatar c√≥ th·ªÉ nh·∫•p ƒë∆∞·ª£c
            wait.Until(ExpectedConditions.ElementToBeClickable(avatar));  // Ki·ªÉm tra ph·∫ßn t·ª≠ avatar c√≥ th·ªÉ click ƒë∆∞·ª£c

            Actions actions = new Actions(driver);
            actions.MoveToElement(avatar).Click().Perform();
            Thread.Sleep(2000); // **Ch·ªù menu m·ªü**

            // **üî• B∆Ø·ªöC 4: CH·ªåN QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG üî•**
            IWebElement manageUsers = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//a[@href='/admin/user/all']")));
            manageUsers.Click();

            // **üî• B∆Ø·ªöC 5: CH·ªú TRANG QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG T·∫¢I XONG üî•**
            wait.Until(ExpectedConditions.UrlContains("/admin/user/all"));
        }





        // **Private Method ƒë·ªÉ ki·ªÉm tra ph·∫ßn t·ª≠ c√≥ t·ªìn t·∫°i**
        private bool IsElementPresent(By by)
        {
            return driver.FindElements(by).Count > 0;
        }

        // **Private Method ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng t·ªõi trang qu·∫£n l√Ω ng∆∞·ªùi d√πng**
        private void NavigateToUserManagementPage()
        {
           // **Nh·∫•n v√†o avatar**
            IWebElement avatar = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//img[contains(@class, 'wiggle-0') and contains(@class, 'aspect-square') and contains(@class, 'rounded-full')]")));
            avatar.Click();
            Thread.Sleep(2000);  


            // Ch·ªù menu m·ªü ra v√† v√†o trang qu·∫£n l√Ω ng∆∞·ªùi d√πng
            IWebElement userManagementButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//a[@href='/admin/user/all']")));
            userManagementButton.Click();

            wait.Until(ExpectedConditions.UrlContains("https://anphashop-clone.vercel.app/admin/user/all"));
        }

        // **TearDown ƒë·ªÉ ƒë√≥ng tr√¨nh duy·ªát sau m·ªói l·∫ßn test**
        [TearDown]
        public void TearDown()
        {
            driver.Quit();
            driver.Dispose();
        }

        // **Test Cases**

        // **Test Case 1: Ki·ªÉm tra truy c·∫≠p trang qu·∫£n l√Ω ng∆∞·ªùi d√πng**
        [Test]
        public void View_UserManagementPage()
        {
            NavigateToUserManagementPage();
            string currentUrl = driver.Url;
            Assert.That(currentUrl.Contains("user"), Is.True, "Kh√¥ng th·ªÉ truy c·∫≠p trang qu·∫£n l√Ω ng∆∞·ªùi d√πng.");
        }

        // **Test Case 2: T√¨m ki·∫øm ng∆∞·ªùi d√πng h·ª£p l·ªá**
        [Test]
        public void Search_Users_Valid()
        {
            NavigateToUserManagementPage();

            IWebElement searchIcon = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//button[contains(@class, 'search')] | //svg[contains(@class, 'wiggle')]")));
            searchIcon.Click();

            Thread.Sleep(1000);

            IWebElement searchField = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//input[contains(@placeholder, 'T√¨m ki·∫øm')]")));
            searchField.Click();

            searchField.SendKeys("gmail.com");
            searchField.SendKeys(Keys.Enter);

            Assert.That(driver.PageSource.Contains("gmail.com"), Is.True, "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email ch·ª©a 'gmail.com'.");
        }

        // **Test Case 3: L·ªçc ng∆∞·ªùi d√πng theo s·ªë d∆∞**
        [Test]
        public void Filter_Users_By_Balance()
        {
            NavigateToUserManagementPage();

            IWebElement balanceField = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("balance")));
            balanceField.SendKeys("30000");
            Thread.Sleep(1000);

            IWebElement filterButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//button[contains(text(), 'L·ªçc')]")));
            filterButton.Click();

            wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[contains(text(), '30,000')]")));

            Assert.That(driver.PageSource.Contains("30,000"), Is.True, "L·ªçc kh√¥ng ho·∫°t ƒë·ªông ƒë√∫ng v·ªõi s·ªë d∆∞ 30,000.");
        }

        // **Test Case 4: S·∫Øp x·∫øp ng∆∞·ªùi d√πng theo th·ªùi gian th√™m m·ªõi**
        [Test]
        public void Sort_Users_LatestAdded()
        {
            NavigateToUserManagementPage();

            IWebElement sortDropdown = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("sort")));
            sortDropdown.SendKeys("C·∫≠p nh·∫≠t m·ªõi nh·∫•t");

            Assert.That(driver.PageSource.Contains("M·ªõi nh·∫•t"), Is.True, "S·∫Øp x·∫øp ng∆∞·ªùi d√πng kh√¥ng ƒë√∫ng.");
        }

        // **Test Case 5: Reset b·ªô l·ªçc ng∆∞·ªùi d√πng**
        [Test]
        public void Reset_Filter_Users()
        {
            NavigateToUserManagementPage();

            IWebElement resetButton = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("reset")));
            resetButton.Click();

            Assert.That(driver.PageSource.Contains("All Users"), Is.True, "Reset b·ªô l·ªçc kh√¥ng ho·∫°t ƒë·ªông.");
        }

        // **Test Case 6: X√≥a ng∆∞·ªùi d√πng h·ª£p l·ªá**
        [Test]
        public void Delete_User_Allowed()
        {
            NavigateToUserManagementPage();

            IWebElement deleteButton = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//button[contains(text(), 'Delete')]")));
            deleteButton.Click();

            IWebElement confirmDelete = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//button[contains(text(), 'Confirm')]")));
            confirmDelete.Click();

            Assert.That(driver.PageSource.Contains("User deleted successfully"), Is.True, "X√≥a ng∆∞·ªùi d√πng kh√¥ng th√†nh c√¥ng.");
        }

        // **Test Case 7: Th√™m s·ªë d∆∞ cho ng∆∞·ªùi d√πng**
        [Test]
        public void Add_User_Balance()
        {
            NavigateToUserManagementPage();

            IWebElement balanceField = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("balance")));
            balanceField.SendKeys("10000");

            IWebElement addBalanceButton = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//button[contains(text(), 'Add Balance')]")));
            addBalanceButton.Click();

            Assert.That(driver.PageSource.Contains("+10,000"), Is.True, "Th√™m s·ªë d∆∞ th·∫•t b·∫°i.");
        }

        // **Test Case 8: N√¢ng c·∫•p ng∆∞·ªùi d√πng l√™n Admin**
        [Test]
        public void Upgrade_User_To_Admin()
        {
            NavigateToUserManagementPage();

            IWebElement upgradeButton = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//button[contains(text(), 'Upgrade to Admin')]")));
            upgradeButton.Click();

            Assert.That(driver.PageSource.Contains("User upgraded to admin"), Is.True, "Kh√¥ng th·ªÉ n√¢ng c·∫•p ng∆∞·ªùi d√πng th√†nh Admin.");
        }
    }
}
